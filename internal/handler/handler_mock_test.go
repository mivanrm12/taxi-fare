// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mivanrm12/taxi-fare/internal/model"
)

// MockvalidationService is a mock of validationService interface.
type MockvalidationService struct {
	ctrl     *gomock.Controller
	recorder *MockvalidationServiceMockRecorder
}

// MockvalidationServiceMockRecorder is the mock recorder for MockvalidationService.
type MockvalidationServiceMockRecorder struct {
	mock *MockvalidationService
}

// NewMockvalidationService creates a new mock instance.
func NewMockvalidationService(ctrl *gomock.Controller) *MockvalidationService {
	mock := &MockvalidationService{ctrl: ctrl}
	mock.recorder = &MockvalidationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockvalidationService) EXPECT() *MockvalidationServiceMockRecorder {
	return m.recorder
}

// ValidateInput mocks base method.
func (m *MockvalidationService) ValidateInput(arg0 []string) ([]model.FareInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateInput", arg0)
	ret0, _ := ret[0].([]model.FareInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateInput indicates an expected call of ValidateInput.
func (mr *MockvalidationServiceMockRecorder) ValidateInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateInput", reflect.TypeOf((*MockvalidationService)(nil).ValidateInput), arg0)
}

// MockfareService is a mock of fareService interface.
type MockfareService struct {
	ctrl     *gomock.Controller
	recorder *MockfareServiceMockRecorder
}

// MockfareServiceMockRecorder is the mock recorder for MockfareService.
type MockfareServiceMockRecorder struct {
	mock *MockfareService
}

// NewMockfareService creates a new mock instance.
func NewMockfareService(ctrl *gomock.Controller) *MockfareService {
	mock := &MockfareService{ctrl: ctrl}
	mock.recorder = &MockfareServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfareService) EXPECT() *MockfareServiceMockRecorder {
	return m.recorder
}

// CalculateTotalFare mocks base method.
func (m *MockfareService) CalculateTotalFare(input model.FareInput) model.FareOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTotalFare", input)
	ret0, _ := ret[0].(model.FareOutput)
	return ret0
}

// CalculateTotalFare indicates an expected call of CalculateTotalFare.
func (mr *MockfareServiceMockRecorder) CalculateTotalFare(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTotalFare", reflect.TypeOf((*MockfareService)(nil).CalculateTotalFare), input)
}
